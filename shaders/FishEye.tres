[gd_resource type="Shader" format=2]

[resource]
code = "/////////////////////////////////
// 2D Radial Distortion Shader //
/////////////////////////////////

// Screen space shader for Godot, based on: https://gist.github.com/aggregate1166877/a889083801d67917c26c12a98e7f57a7

shader_type canvas_item;

uniform float aspect = 1.0;
uniform float distortion = 1.0;
uniform float radius = 1.0;
uniform float alpha = 1.0;
uniform float crop = 1.0;
uniform vec4 crop_color : hint_color = vec4(0,0,0,1);

uniform float crt_brightness: hint_range(0.0, 1.0, 0.1) = 1.0;
uniform float crt_ghost: hint_range(0.0, 10.0, 0.1) = 3.0;
uniform float crt_dimming: hint_range(0.25, 1.0, 0.01) = 0.45;

vec4 crt_color_shift(vec2 screen_uv, sampler2D screen_texture, vec2 screen_pixel_size){
	vec3 color = texture(screen_texture, screen_uv).rgb * (1.0-crt_brightness*0.5);
	color += texture(screen_texture, screen_uv - vec2(screen_pixel_size.x * crt_ghost, 0.0)).rgb;
	color += texture(screen_texture, screen_uv + vec2(screen_pixel_size.x * crt_ghost, 0.0)).rgb;
	color *= crt_brightness * crt_dimming;
	return vec4(color, 1.0);
}

vec2 distort(vec2 p)
{
	float d = length(p);
	float z = sqrt(distortion + d * d * -distortion);
	float r = atan(d, z) / 3.1415926535;
	float phi = atan(p.y, p.x);
	return vec2(r * cos(phi) * (1.0 / aspect) + 0.5, r * sin(phi) + 0.5);
}

void fragment()
{
	vec2 xy = (SCREEN_UV * 2.0 - 1.0); // move origin of UV coordinates to center of screen

	xy = vec2(xy.x * aspect, xy.y); // adjust aspect ratio

	float d = length(xy); // distance from center

	vec4 tex;

	if (d < radius)
	{
		xy = distort(xy);
		COLOR = crt_color_shift(xy, SCREEN_TEXTURE, SCREEN_PIXEL_SIZE);
		COLOR.a = alpha;
	}

	// radial crop
	if (d > crop)
	{
		COLOR = crop_color;
	}
}


"
