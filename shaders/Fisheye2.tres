[gd_resource type="Shader" format=2]

[resource]
code = "// Converted from https://www.shadertoy.com/view/td2GzW
shader_type canvas_item;

// Anti fish eye (negative amount) / fish eye (positive)
uniform float effect_amount : hint_range(-2.5, 2.5) = 1.0;

uniform float crt_brightness: hint_range(0.0, 1.0, 0.1) = 1.0;
uniform float crt_ghost: hint_range(0.0, 10.0, 0.1) = 3.0;
uniform float crt_dimming: hint_range(0.25, 1.0, 0.01) = 0.45;

vec4 crt_color_shift(vec2 screen_uv, sampler2D screen_texture, vec2 screen_pixel_size){
	vec3 color = texture(screen_texture, screen_uv).rgb * (1.0-crt_brightness*0.5);
	color += texture(screen_texture, screen_uv - vec2(screen_pixel_size.x * crt_ghost, 0.0)).rgb;
	color += texture(screen_texture, screen_uv + vec2(screen_pixel_size.x * crt_ghost, 0.0)).rgb;
	color *= crt_brightness * crt_dimming;
	return vec4(color, 1.0);
}

void fragment() {
	// glsl -> godot shader
	vec2 iResolution = 1.0 / SCREEN_PIXEL_SIZE;
	vec4 fragCoord = FRAGCOORD;

	//normalized coords 
	vec2 p = fragCoord.xy / iResolution.x;

	//screen proroption
	float prop = iResolution.x / iResolution.y;

	//center coords
	vec2 m = vec2(0.5, 0.5 / prop);

	//vector from center to current fragment
	vec2 d = p - m;

	// distance of pixel from center
	float r = sqrt(dot(d, d)); 

	float power = effect_amount;

	//radius of 1:1 effect
	float bind;
	
	//stick to borders
	if (power > 0.0) 
		bind = sqrt(dot(m, m));
	else {
		if (prop < 1.0) 
    		bind = m.x; 
    	else 
        	bind = m.y;
	}

	vec2 uv;
	//fisheye
	if (power > 0.0)
		uv = m + normalize(d) * tan(r * power) * bind / tan( bind * power);
	//antifisheye
	else if (power < 0.0)
		uv = m + normalize(d) * atan(r * -power * 10.0) * bind / atan(-power * bind * 10.0);
	//no effect for power = 1.0
	else
		uv = p;
    uv.y *= prop;
    
	COLOR = crt_color_shift(uv, SCREEN_TEXTURE, SCREEN_PIXEL_SIZE);
}"
